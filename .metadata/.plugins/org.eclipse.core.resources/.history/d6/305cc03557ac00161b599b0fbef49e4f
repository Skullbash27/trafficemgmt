import java.util.Map.Entry;

public class Schedule implements Runnable{
	
	private int greenTime = 5000;
	private int yellowTime = 2000;
	private int sleepTime = 100;
	
	private boolean isRunning = false;
	
	private Thread lightSchedule;
	char scheduleType = 'D';
	/*
	 * D=dumb scheduling
	 * S=self scheduling
	 * C=coordinated scheduling
	 * V=convoy scheduling
	 */
	
	public Schedule(char scheduleType, int greenTime, int yellowTime) {
		this.scheduleType = scheduleType;
		this.greenTime = greenTime;
		this.yellowTime = yellowTime;
		sleepTime = 100;
	}
	
	private synchronized void workTime() {
		TrafficPoint tempPoint = null;
		if(scheduleType == 'D') {
			for(Entry<char[], TrafficPoint> entry : TrafficPoint.getEntrySet()) {
				if(entry.getValue().control[0] == 'E') continue;
				tempPoint = entry.getValue();
				tempPoint.cycleTime += sleepTime;
				if((tempPoint.control[0] == 'Y' || tempPoint.control[1] == 'Y') &&
						tempPoint.cycleTime > (yellowTime+sleepTime)) {
					tempPoint.nextControl();
					tempPoint.cycleTime = 0;
				} else if((tempPoint.control[0] == 'G' || tempPoint.control[1] == 'G') && 
						tempPoint.cycleTime > (greenTime+sleepTime)) {
					tempPoint.nextControl();
					tempPoint.cycleTime = 0;
				}
			}
		} else if(scheduleType == 'S') {
			for(Entry<char[], TrafficPoint> entry : TrafficPoint.getEntrySet()) {
				if(entry.getValue().control[0] == 'E') continue;
				tempPoint = entry.getValue();
				tempPoint.cycleTime += sleepTime;
				if((tempPoint.control[0] == 'Y' || tempPoint.control[1] == 'Y') &&
						tempPoint.cycleTime > (yellowTime+sleepTime)) {
					tempPoint.nextControl();
					tempPoint.cycleTime = 0;
					/*if(scheduleType == 'C') { keep separate
						if(tempPoint.control[0] == 'G') {
							tempPoint.nextStreet.expectedCars[0] = tempPoint.comingCars[0];
							tempPoint.nextStreet
						}
					}*/
				} else if((tempPoint.control[0] == 'G' || tempPoint.control[1] == 'G') &&
						tempPoint.cycleTime > (greenTime+sleepTime)) {
					tempPoint.nextControl();
					tempPoint.cycleTime = 0;
				} else if((tempPoint.control[0] != 'Y' && tempPoint.control[1] != 'Y') &&
						tempPoint.cycleTime > (yellowTime+sleepTime)) {
					if(tempPoint.control[0] == 'R' && 
							(tempPoint.comingCars[0] > tempPoint.comingCars[1])) {
						tempPoint.nextControl();
						tempPoint.cycleTime = 0;
					} else if(tempPoint.control[1] == 'R' &&
							(tempPoint.comingCars[1] > tempPoint.comingCars[0])) {
						tempPoint.nextControl();
						tempPoint.cycleTime = 0;
					}
				}
			}
		}
	}
	
	@Override
	public void run() {
		while (isRunning) {
			workTime();
			try {
				Thread.sleep(sleepTime);
			} catch (InterruptedException e) {
				break;
			}
		}
	}
	
	public void start() {
		if(lightSchedule == null)
			lightSchedule = new Thread(this);
		isRunning = true;
		lightSchedule.start();
	}
	public void pause() {
		lightSchedule.interrupt();
		isRunning = false;
	}
}
