import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class Grid {
	
	private HashMap<char[], TrafficControl> trafficPoints = new HashMap<char[], TrafficControl>();
	
	private HashMap<char[], Road> roadMap = new HashMap<char[], Road>();
	
	private int[] streetDist;
	private int[] avenueDist;
	
	public Grid(int NumberOfStreets, int NumberOfAvenues, int MinBlockSide, int MaxBlockSide) {
		if(NumberOfStreets >= 999 || NumberOfAvenues >= 999) {
			System.out.println("Numbers are outside program capacity");
			return;
		}
		System.out.println("Creating the grid");
		System.out.println("Initializing roads, entrance and exit points");
		Road tempRoadS, tempRoadA, tempRoad;
		TrafficControl tempPoint;
		char[] roadIDS = new char[4];
		char[] roadIDA = new char[4];
		char[] roadDir = new char[2];
		int accPos = 0;
		streetDist = new int[NumberOfStreets+2];
		streetDist[0] = 0;
		for(int i = 0; i<NumberOfStreets; i++) {		//declaring and initializing Streets
			roadIDS = getStreetID(i+1);
			roadDir[0] = (i%2==0)? 'E':'W';
			streetDist[i+1]= (int) (MinBlockSide+(MaxBlockSide-MinBlockSide)*Math.random());
			accPos += streetDist[i+1];	
			tempRoadS = new Road(roadIDS, roadDir[0], accPos);
			tempRoadS.setRoadType('S');
			roadMap.put(roadIDS, tempRoadS);
		}
		streetDist[NumberOfStreets+1] = (int) (MinBlockSide+(MaxBlockSide-MinBlockSide)*Math.random());
		
		accPos = 0;
		avenueDist = new int[NumberOfAvenues+2];
		avenueDist[0] = 0;
		for(int i = 0; i<NumberOfAvenues; i++) {		//declaring and initializing Avenues
			roadIDA = getAvenueID(i+1);
			roadDir[1] = (i%2==0)? 'N':'S';
			avenueDist[i+1]= (int) (MinBlockSide+(MaxBlockSide-MinBlockSide)*Math.random());
			accPos += avenueDist[i+1];	
			tempRoadA = new Road(roadIDA, roadDir[1], accPos);
			tempRoadA.setRoadType('A');
			roadMap.put(roadIDA, tempRoadA);
		}
		avenueDist[NumberOfAvenues+1] = (int) (MinBlockSide+(MaxBlockSide-MinBlockSide)*Math.random());

		//declaring and initializing street and avenue entrance and exit points
		char[] pointChar;
		int[] xy = new int[] {0, 0};
		for (Map.Entry<char[], Road> entry : roadMap.entrySet()) {
			//declaring and initializing street and avenue entrance and exit points 
			tempRoad = entry.getValue();
			if(tempRoad.getType() == 'S') {
				roadIDA = new char[]{'0','0','0','0'};
				roadIDS = Arrays.copyOfRange(tempRoad.getRoadID(), 0, 3);
				roadIDS[0] = '1';
				roadDir[0] = tempRoad.getRoadDirection();
				roadDir[1] = roadDir[0];
				if(roadDir[0] == 'E') {
					xy = new int[]{avenueDist[NumberOfAvenues+1], tempRoad.getAccPos()};
				} else if(roadDir[0] == 'W') {
					xy = new int[]{0, tempRoad.getAccPos()};
				}
				pointChar = new char[]{'E','N'};
				tempPoint = new TrafficControl(roadIDS, roadIDA, roadDir, 
						pointChar, xy);
				trafficPoints.put(tempPoint.getPointID(), tempPoint);
				roadIDS[0] = '2';
				if(roadDir[0] == 'E') {
					xy = new int[]{0, tempRoad.getAccPos()};
				} else if(roadDir[0] == 'W') {
					xy = new int[]{avenueDist[NumberOfAvenues+1], tempRoad.getAccPos()};
				}
				pointChar = new char[]{'E','X'};
				tempPoint = new TrafficControl(roadIDS, roadIDA, roadDir, 
						pointChar, xy);
				trafficPoints.put(tempPoint.getPointID(), tempPoint);
			} else if(tempRoad.getType() == 'A') {
				//declaring and initializing avenue entrance and exit points
				roadIDA = Arrays.copyOfRange(tempRoad.getRoadID(), 0, 3);
				roadIDA[0] = '1';
				roadIDS = new char[]{'0','0','0','0'};
				roadDir[1] = tempRoad.getRoadDirection();
				roadDir[0] = roadDir[1];
				if(roadDir[1] == 'N') {
					xy = new int[]{tempRoad.getAccPos(), 0};
				} else if(roadDir[1] == 'S') {
					xy = new int[]{tempRoad.getAccPos(), streetDist[NumberOfStreets+1]};
				}
				pointChar = new char[]{'E','N'};
				tempPoint = new TrafficControl(roadIDS, roadIDA, roadDir, 
						pointChar, xy);
				trafficPoints.put(tempPoint.getPointID(), tempPoint);
				roadIDA[0] = '2';
				if(roadDir[1] == 'N') {
					xy = new int[]{tempRoad.getAccPos(), streetDist[NumberOfStreets+1]};
				} else if(roadDir[1] == 'S') {
					xy = new int[]{tempRoad.getAccPos(), 0};
				}
				pointChar = new char[]{'E','X'};
				tempPoint = new TrafficControl(roadIDS, roadIDA, roadDir, 
						pointChar, xy);
				trafficPoints.put(tempPoint.getPointID(), tempPoint);
			}
		}
		//-----------------------------------------------------------------
		//for (Map.Entry<char[], TrafficControl> entry : trafficPoints.entrySet()) {
		//	System.out.print(entry.getKey());
		//	System.out.print("\t");
		//	System.out.println(entry.getValue());
		//}
		//-----------------------------------------------------------------
		
		System.out.println("Initializing Intersection points");
		pointChar = new char[]{'G','R'};
		for(int i=0; i<NumberOfStreets; i++) {
			roadIDS = getStreetID(i+1);
			tempRoadS = roadMap.get(roadIDS);
			//up and down constructing street and avenue IDs
			for(int j=0; j<NumberOfAvenues; j++) {
				roadIDA = getAvenueID(j+1);
				tempRoadA = roadMap.get(roadIDA);
				//declaration and initialization of intersection points
				xy[0] = tempRoadA.getAccPos();
				xy[1] = tempRoadS.getAccPos();
				roadDir[0] = tempRoadS.getRoadDirection();
				roadDir[1] = tempRoadA.getRoadDirection();
				tempPoint = new TrafficControl(roadIDS, roadIDA, roadDir, 
						pointChar, xy);
				trafficPoints.put(tempPoint.getPointID(), tempPoint);
			}
		}
	}
	
	public Road getStreetObjFromInt(int i) {
		char[] roadIDS = getStreetID(i);
		System.out.println(roadIDS);
		return roadMap.get(roadIDS);
	}
	public Road getAvenueObjFromInt(int i) {
		char[] roadIDA = getAvenueID(i);
		return roadMap.get(roadIDA);
	}
	
	public TrafficControl getIntersectionFromInt(int i, int j) {
		char[] roadIDS = getStreetID(i);
		char[] roadIDA = getAvenueID(j);
		char[] roadID = new char[8];
		for(int k=0; k<roadID.length; k++) {
			if(k<4)
				roadID[k]=roadIDS[k];
			else
				roadID[k]=roadIDA[k-4];
		}
		return trafficPoints.get(roadID);
	}
	
	private char[] getStreetID(int i) {
		char[] roadIDS = getRoadIDFromInt(i);
		roadIDS[0] = '3';	//first char of the road ID 3=street
		return roadIDS;
	}
	private char[] getAvenueID(int i) {
		char[] roadIDA = getRoadIDFromInt(i);
		roadIDA[0] = '4';
		return roadIDA;
	}
	
	private char[] getRoadIDFromInt(int i) {
		char[] roadID = new char[4];
		char[] roadNumber = String.valueOf(i).toCharArray();
		int k=0;
		for(int j=0; j<(3-roadNumber.length); j++) {	//zero pending to hundreds and tens position
			roadID[j+1]='0';
			k++;
		}
		for(int j=k; j<3; j++)
			roadID[j+1]=roadNumber[j-k];
		return roadID;
	}
}
