import java.awt.BorderLayout;
import java.util.Map;

import javax.swing.JFrame;

public class Frame extends JFrame {
	
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	protected PaintGrid paintGrid;
	protected Schedule lights;
	protected ToolBar toolBar;
	protected final int frameWidth = 800;
	protected final int frameHeight = 600;
	protected Configuration config;
	protected Grid grid;
	/*
	 * communicating configuration variables to classes through static variables
	 */
	protected static int carSpeed, carAcceleration, carLength, 
			carWidth, Clearance, carCount, fullDistance;
	
	public Frame() {
		super("Traffic Management System");
		config  = new Configuration("traffic.conf");
		
		carSpeed = config.CarSpeed;
		carAcceleration = config.CarAcceleration;
		carLength = config.CarLength;
		carWidth = config.CarWidth;
		Clearance = config.Clearance;
		carCount = config.NumberOfCars;
		fullDistance = 0;
		int temp = 0;
		while(temp <= carSpeed) {
			temp += carAcceleration;
			fullDistance += temp;
		}
		//System.out.println("Full distance = "+fullDistance);
		grid  = new Grid(config.NumberOfStreets, config.NumberOfAvenues, 
				config.MinimumBlockSide, config.MaximumBlockSide);
		for(Map.Entry<char[], Road> entry : Road.getEntrySet()) {
			System.out.println(entry.getValue().sectors[1]+"\t"+entry.getValue().roadDir);
		}
		paintGrid = new PaintGrid();
		lights = new Schedule('D', config.MaxGreenTime, config.YellowTime);
		
		toolBar = new ToolBar();
		
		toolBar.setDisplayEvents(new DisplayEvents(){
			public void draw() {
				paintGrid.start();
				lights.start();
				Car.addCars(50);
			}			
		});
		
		setLayout(new BorderLayout());
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		add(toolBar, BorderLayout.PAGE_START);
		add(paintGrid, BorderLayout.CENTER);
		setSize(frameWidth, frameHeight);
		setVisible(true);
	}	
}
