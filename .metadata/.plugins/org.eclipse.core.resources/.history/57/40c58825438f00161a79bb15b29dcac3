
public class TrafficControl {
	
	private char[] pointID = new char[8];
	/*
	 * TrafficControl is a class to represent intersection points
	 * ID divided into two 4-char IDs
	 * first 4-chars [0:3] represents the street ID
	 * second 4-chars [4:7] represents the avenue ID
	 * first char of the road ID 1=entrance, 2=exit, 3=street, 4=avenue
	 */
	private char streetDir;
	private char avenueDir;
	
	private char[] control = new char[2];
	/*
	 * first char street light status R=Red G=Gree Y=Yellow
	 * second char avenue light status R=Red G=Gree Y=Yellow
	 * control = 'EE' for enterance/exit points
	 */
	
	public TrafficControl(char[] streetID, char[] avenueID, 
			char streetDir, char avenueDir, char[] control) {
		if(streetID.length != 4 || avenueID.length != 4) {
			return;
		}
		for(int i=0; i<pointID.length; i++){		//copying road IDs as traffic light ID
			if(i<4)
				pointID[i]=streetID[i];
			else
				pointID[i]=avenueID[i-4];
		}
		this.streetDir = streetDir;
		this.avenueDir = avenueDir;
		this.control = control;
	}
	
	public char[] getPointID() {
		return pointID;
	}
	public char getStreetDir() {
		return streetDir;
	}
	public char getAvenueDir() {
		return avenueDir;
	}
	public char[] getControl() {
		return control;
	}
	public boolean setStreetControl(char control) {
		if(pointID[0] != '3' || pointID[0] != '4')		//not street or avenue
			return false;
		else if((control == 'G' || control == 'Y') && this.control[1] != 'R')
			//other light must be red to change this to green or yellow
			return false;
		else
			this.control[0] = control;
		return true;
	}
	public boolean setAvenueControl(char control) {
		if(pointID[0] != '3' || pointID[0] != '4')		//not street or avenue
			return false;
		else if((control == 'G' || control == 'Y') && this.control[0] != 'R')
			//other light must be red to change this to green or yellow
			return false;
		else
			this.control[1] = control;
		return true;
	}
}
